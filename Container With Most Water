You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1

Try to use two-pointers. Set one pointer to the left and one to the right of the array. Always move the pointer that points to the lower line.

Solution

class Solution {
    public int maxArea(int[] height) {
        int i = 0,j = height.length-1,max = Integer.MIN_VALUE;
        while(i < j){
            if(height[i] < height[j]){
                int value = height[i]*(j-i);
                max = max < value ? value : max;
                i++;
            }else{
                int value = height[j]*(j-i);
                max = max < value ? value : max;
                j--;
            }
        }
        return max;
    }
}

Approach:

Here we are checking if the left pointer and right pointer whichever is min and then multiplying it with the indexex. The ultimate aim is to have the water level quantity
if the ith pointer is small then increment it else decrement the jth pointer.
