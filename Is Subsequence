Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

Example 1:

Input: s = "abc", t = "ahbgdc"
Output: true
Example 2:

Input: s = "axc", t = "ahbgdc"
Output: false

Solution 
class Solution {
    public boolean isSubsequence(String s, String t) {
        int i = 0,j=0,count = 0;
        if(t.length() == 0 && s.length() == 0 )
        return true;
        if(t.length() == 0 )
        return false;
        if(s.length() == 0)
        return true;
        
        while (i < s.length() && j < t.length()){
            if(s.charAt(i) == t.charAt(j)){
                i++;
                count++;
            }else if(j == t.length() - 1){
                return false;
            }
            j++;
        }
        if(count == s.length())
        return true;
        else
        return false;
    }
}

Approach

Two pointer are used to check in both the strings if the particular charater is available if its available we are incrementing the pointers in both
If its not available then incrementing the pointer in the target string alone and continuing search.
MEan while if the char is present in the given and target string increming the counter once.

At the end of the loop if the count and given string length is same then its a subsequence.
