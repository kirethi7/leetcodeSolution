Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]


Solution
class Solution {
    public void moveZeroes(int[] nums) {
        int i =0,j=1, temp = 0;
        while( i < j && j < nums.length){
             System.out.println("i= "+i + " nums[i] "+ nums[i]);
            System.out.println("j= "+j + " nums[j] "+ nums[j]);
            if(nums[i] == 0 && nums[j] != 0){
                temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
                i++;
            }else if(nums[j] == 0 && nums[i] != 0){
                i = j;
            }
            j++;
        }
    }
}


Approach

We are just comparing the i and j pointer and if i is 0 and j is not then we are swaping the values in the corresponding array and incrementing the pointers.
if suppose j is 0 and i is not 0 we are already ahead and we need to move ith pointer position to j and thus j gets moved automatically to the next position
